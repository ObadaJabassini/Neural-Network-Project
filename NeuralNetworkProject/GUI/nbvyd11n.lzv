using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MathNet.Numerics.LinearAlgebra;
using NeuralNetworkProject.DataAdapter;
using NeuralNetworkProject.Math;
using NeuralNetworkProject.NeuralNetwork;
using Telerik.Windows.Diagrams.Core;

namespace NeuralNetworkProject.GUI
{
    static class Controller
    {
        public static bool ParseFile()
        {
           
            return true;
        }

        public static void CreateNet(FlowLayoutPanel layers, FileDialog LoadData_dlg, Telerik.WinControls.UI.RadDiagram radDiagram1)
        {
            Training.Trainer trainer = new Training.Trainer();
            List<Layer> layersent=new List<Layer>();
            Layer_ctrl temp;
            int neuronsnumber;
            //ActivatorFunctions.FunctionName applier ;
            foreach (var layer  in layers.Controls)
            {
                temp= layer as Layer_ctrl;
                neuronsnumber = Convert.ToInt16(temp.numericUpDown1.Value);

                //if (ActivatorFunctions.FunctionName.SIGMOID.ToString() == temp.AF_drpdn.SelectedItem.Text)
                //    applier = ActivatorFunctions.FunctionName.SIGMOID;
                 layersent.Add(new Layer() { Applier = new Math.FunctionApplier(), NeuronsNumber = neuronsnumber });
            }
            NeuralNetwork.NeuralNetwork nn = new NeuralNetwork.NeuralNetwork(layersent);
            //NeuralNetwork.NeuralNetwork nn = new NeuralNetwork.NeuralNetworkBuilder().
            //Layer(4, new Math.FunctionApplier()).
            //Layer(5, new Math.FunctionApplier()).
            //Layer(3, new Math.FunctionApplier()).
            //Build();
            
            //if (LoadData_dlg.CheckFileExists == false) return false;

            string FileName = LoadData_dlg.FileName;

            var tuples = DataReader.DataReader.Instance.ReadFromFile(FileName);

            var inputs = tuples.Item1;
            var outputs = tuples.Item2;
            DataDivider Divider = new DataDivider();
            var temp2 = Divider.Divide(inputs, outputs);
            for (int i = 0; i < temp2.Item1.RowCount; i++)
            {
                //LoadData.Input_plt.Series[0].Points.AddXY(temp.Item1.);
                //temp.Item1[i, 0];
            }
            trainer.Train(nn, tuples.Item1, tuples.Item2);
            //// test case (should belong to the second class = [0 1 0])
            var tt = nn.ForwardInput(Vector<double>.Build.DenseOfArray(new double[] { 5.5, 2.5, 4.0, 1.3 }));
            //Console.WriteLine(tt.Item1[tt.Item1.Count - 1]);
            //Console.ReadLine();
            Graph_Training GraphTraining = new Graph_Training(nn);
            foreach (var layer in nn.Layers)
            {
                if (radDiagram1.Items.Count == 0)
                    radDiagram1.AddShape(new Layer_shape());
                else
                {
                    radDiagram1.AddShape(new Layer_shape(), null,
                        new Point(radDiagram1.Items[radDiagram1.Items.Count - 2].Location.X + 150,
                            radDiagram1.Items[radDiagram1.Items.Count - 1].Location.Y)
                        );
                    radDiagram1.AddConnection((IShape)radDiagram1.Items[radDiagram1.Items.Count -3],
                        (IShape)radDiagram1.Items[radDiagram1.Items.Count - 1]);
                }
            }
           // GraphTraining.Show();
        }
    }
}
